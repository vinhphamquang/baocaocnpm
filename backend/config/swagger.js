const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'VinFast API Documentation',
      version: '1.0.0',
      description: `
        ## üöó VinFast API Documentation

        API documentation cho website c·ª≠a h√†ng √¥ t√¥ VinFast - H·ªá th·ªëng qu·∫£n l√Ω b√°n h√†ng v√† d·ªãch v·ª• √¥ t√¥ ƒëi·ªán.

        ### üîê Authentication
        API s·ª≠ d·ª•ng JWT (JSON Web Token) ƒë·ªÉ x√°c th·ª±c. ƒê·ªÉ s·ª≠ d·ª•ng c√°c endpoint ƒë∆∞·ª£c b·∫£o v·ªá:
        1. ƒêƒÉng nh·∫≠p qua \`/api/auth/login\` ƒë·ªÉ l·∫•y token
        2. Th√™m token v√†o header: \`Authorization: Bearer <token>\`

        ### üì± Features
        - **Authentication & Authorization**: ƒêƒÉng k√Ω, ƒëƒÉng nh·∫≠p, qu·∫£n l√Ω ng∆∞·ªùi d√πng
        - **Car Management**: Qu·∫£n l√Ω xe, t√¨m ki·∫øm, l·ªçc theo lo·∫°i
        - **Order Management**: ƒê·∫∑t h√†ng, theo d√µi ƒë∆°n h√†ng, thanh to√°n
        - **Test Drive**: ƒêƒÉng k√Ω l√°i th·ª≠, qu·∫£n l√Ω l·ªãch h·∫πn
        - **Contact**: H·ªá th·ªëng li√™n h·ªá t∆∞ v·∫•n
        - **News**: Qu·∫£n l√Ω tin t·ª©c, b√†i vi·∫øt
        - **User Management**: Qu·∫£n l√Ω ng∆∞·ªùi d√πng (Admin)

        ### üåê Base URL
        - Development: \`http://localhost:8000/api\`
        - Production: \`https://api.vinfast.com/api\`
      `,
      contact: {
        name: 'VinFast Development Team',
        email: 'dev@vinfast.com',
        url: 'https://vinfast.vn'
      },
      license: {
        name: 'MIT',
        url: 'https://opensource.org/licenses/MIT'
      }
    },
    tags: [
      {
        name: 'Authentication',
        description: 'API x√°c th·ª±c v√† qu·∫£n l√Ω phi√™n ƒëƒÉng nh·∫≠p'
      },
      {
        name: 'Cars',
        description: 'API qu·∫£n l√Ω xe - xem, t√¨m ki·∫øm, qu·∫£n l√Ω (Admin)'
      },
      {
        name: 'Orders',
        description: 'API qu·∫£n l√Ω ƒë∆°n h√†ng - ƒë·∫∑t c·ªçc, theo d√µi tr·∫°ng th√°i'
      },
      {
        name: 'Test Drive',
        description: 'API ƒëƒÉng k√Ω v√† qu·∫£n l√Ω l·ªãch l√°i th·ª≠ xe'
      },
      {
        name: 'Contact',
        description: 'API li√™n h·ªá t∆∞ v·∫•n v√† h·ªó tr·ª£ kh√°ch h√†ng'
      },
      {
        name: 'News',
        description: 'API qu·∫£n l√Ω tin t·ª©c v√† b√†i vi·∫øt'
      },
      {
        name: 'Users',
        description: 'API qu·∫£n l√Ω ng∆∞·ªùi d√πng (Admin only)'
      }
    ],
    servers: [
      {
        url: process.env.NODE_ENV === 'production' 
          ? 'https://api.vinfast.com' 
          : `http://localhost:${process.env.PORT || 8000}`,
        description: process.env.NODE_ENV === 'production' ? 'Production server' : 'Development server'
      }
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
          description: 'JWT token ƒë·ªÉ x√°c th·ª±c. Format: Bearer <token>'
        }
      },
      schemas: {
        User: {
          type: 'object',
          required: ['name', 'email', 'password', 'phone'],
          properties: {
            _id: {
              type: 'string',
              description: 'ID ng∆∞·ªùi d√πng'
            },
            name: {
              type: 'string',
              description: 'H·ªç t√™n',
              example: 'Nguy·ªÖn VƒÉn A'
            },
            email: {
              type: 'string',
              format: 'email',
              description: 'Email',
              example: 'user@example.com'
            },
            phone: {
              type: 'string',
              description: 'S·ªë ƒëi·ªán tho·∫°i',
              example: '0123456789'
            },
            address: {
              type: 'string',
              description: 'ƒê·ªãa ch·ªâ',
              example: 'H√† N·ªôi'
            },
            role: {
              type: 'string',
              enum: ['user', 'admin'],
              description: 'Vai tr√≤',
              example: 'user'
            },
            isActive: {
              type: 'boolean',
              description: 'Tr·∫°ng th√°i ho·∫°t ƒë·ªông',
              example: true
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Ng√†y t·∫°o'
            }
          }
        },
        Car: {
          type: 'object',
          required: ['name', 'type', 'price', 'year', 'description'],
          properties: {
            _id: {
              type: 'string',
              description: 'ID xe'
            },
            name: {
              type: 'string',
              description: 'T√™n xe',
              example: 'VinFast VF 8'
            },
            slug: {
              type: 'string',
              description: 'Slug URL',
              example: 'vinfast-vf-8'
            },
            type: {
              type: 'string',
              enum: ['sedan', 'suv', 'electric'],
              description: 'Lo·∫°i xe',
              example: 'electric'
            },
            price: {
              type: 'number',
              description: 'Gi√° xe (VND)',
              example: 1200000000
            },
            year: {
              type: 'number',
              description: 'NƒÉm s·∫£n xu·∫•t',
              example: 2024
            },
            description: {
              type: 'string',
              description: 'M√¥ t·∫£ xe'
            },
            images: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  url: { type: 'string' },
                  alt: { type: 'string' },
                  isPrimary: { type: 'boolean' }
                }
              }
            },
            specifications: {
              type: 'object',
              properties: {
                engine: { type: 'string' },
                power: { type: 'string' },
                transmission: { type: 'string' },
                fuelType: { type: 'string' },
                seating: { type: 'number' }
              }
            },
            isElectric: {
              type: 'boolean',
              description: 'Xe ƒëi·ªán',
              example: true
            },
            isFeatured: {
              type: 'boolean',
              description: 'Xe n·ªïi b·∫≠t',
              example: true
            },
            stock: {
              type: 'number',
              description: 'S·ªë l∆∞·ª£ng t·ªìn kho',
              example: 10
            }
          }
        },
        Order: {
          type: 'object',
          required: ['items', 'customerInfo', 'payment'],
          properties: {
            _id: {
              type: 'string',
              description: 'ID ƒë∆°n h√†ng'
            },
            orderNumber: {
              type: 'string',
              description: 'M√£ ƒë∆°n h√†ng',
              example: 'VF20241201001'
            },
            user: {
              type: 'string',
              description: 'ID ng∆∞·ªùi d√πng'
            },
            items: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  car: { type: 'string' },
                  quantity: { type: 'number' },
                  selectedColor: { type: 'string' },
                  depositAmount: { type: 'number' },
                  unitPrice: { type: 'number' }
                }
              }
            },
            customerInfo: {
              type: 'object',
              properties: {
                fullName: { type: 'string' },
                email: { type: 'string' },
                phone: { type: 'string' },
                address: { type: 'string' },
                city: { type: 'string' }
              }
            },
            payment: {
              type: 'object',
              properties: {
                method: {
                  type: 'string',
                  enum: ['bank_transfer', 'credit_card', 'cash']
                },
                status: {
                  type: 'string',
                  enum: ['pending', 'completed', 'failed', 'refunded']
                },
                amount: { type: 'number' }
              }
            },
            status: {
              type: 'string',
              enum: ['pending', 'confirmed', 'processing', 'completed', 'cancelled'],
              example: 'pending'
            },
            totalAmount: {
              type: 'number',
              description: 'T·ªïng ti·ªÅn',
              example: 100000000
            }
          }
        },
        TestDrive: {
          type: 'object',
          required: ['car', 'customerInfo', 'schedule', 'location'],
          properties: {
            _id: {
              type: 'string',
              description: 'ID l·ªãch l√°i th·ª≠'
            },
            car: {
              type: 'string',
              description: 'ID xe'
            },
            customerInfo: {
              type: 'object',
              properties: {
                fullName: { type: 'string' },
                email: { type: 'string' },
                phone: { type: 'string' }
              }
            },
            schedule: {
              type: 'object',
              properties: {
                preferredDate: {
                  type: 'string',
                  format: 'date',
                  description: 'Ng√†y mong mu·ªën'
                },
                preferredTime: {
                  type: 'string',
                  enum: ['08:00', '09:00', '10:00', '11:00', '14:00', '15:00', '16:00', '17:00'],
                  description: 'Gi·ªù mong mu·ªën'
                }
              }
            },
            location: {
              type: 'string',
              enum: ['hanoi', 'hcm', 'danang', 'haiphong', 'cantho'],
              description: 'ƒê·ªãa ƒëi·ªÉm l√°i th·ª≠'
            },
            status: {
              type: 'string',
              enum: ['pending', 'confirmed', 'completed', 'cancelled', 'no_show'],
              example: 'pending'
            }
          }
        },
        Contact: {
          type: 'object',
          required: ['name', 'email', 'phone', 'subject', 'message'],
          properties: {
            _id: {
              type: 'string',
              description: 'ID li√™n h·ªá'
            },
            name: {
              type: 'string',
              description: 'H·ªç t√™n',
              example: 'Nguy·ªÖn VƒÉn A'
            },
            email: {
              type: 'string',
              format: 'email',
              description: 'Email'
            },
            phone: {
              type: 'string',
              description: 'S·ªë ƒëi·ªán tho·∫°i'
            },
            subject: {
              type: 'string',
              enum: ['product-inquiry', 'test-drive', 'purchase', 'service', 'warranty', 'other'],
              description: 'Ch·ªß ƒë·ªÅ'
            },
            message: {
              type: 'string',
              description: 'N·ªôi dung tin nh·∫Øn'
            },
            status: {
              type: 'string',
              enum: ['new', 'in_progress', 'resolved', 'closed'],
              example: 'new'
            }
          }
        },
        News: {
          type: 'object',
          required: ['title', 'excerpt', 'content', 'category', 'featuredImage'],
          properties: {
            _id: {
              type: 'string',
              description: 'ID b√†i vi·∫øt'
            },
            title: {
              type: 'string',
              description: 'Ti√™u ƒë·ªÅ'
            },
            slug: {
              type: 'string',
              description: 'Slug URL'
            },
            excerpt: {
              type: 'string',
              description: 'T√≥m t·∫Øt'
            },
            content: {
              type: 'string',
              description: 'N·ªôi dung'
            },
            category: {
              type: 'string',
              enum: ['product', 'technology', 'business', 'event', 'announcement', 'review'],
              description: 'Danh m·ª•c'
            },
            featuredImage: {
              type: 'object',
              properties: {
                url: { type: 'string' },
                alt: { type: 'string' }
              }
            },
            status: {
              type: 'string',
              enum: ['draft', 'published', 'archived'],
              example: 'published'
            },
            featured: {
              type: 'boolean',
              description: 'Tin t·ª©c n·ªïi b·∫≠t'
            },
            views: {
              type: 'number',
              description: 'L∆∞·ª£t xem'
            }
          }
        },
        Error: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: false
            },
            message: {
              type: 'string',
              description: 'Th√¥ng b√°o l·ªói'
            },
            errors: {
              type: 'array',
              items: {
                type: 'object'
              },
              description: 'Chi ti·∫øt l·ªói validation'
            }
          }
        },
        Success: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: true
            },
            message: {
              type: 'string',
              description: 'Th√¥ng b√°o th√†nh c√¥ng',
              example: 'Th√†nh c√¥ng'
            },
            data: {
              type: 'object',
              description: 'D·ªØ li·ªáu tr·∫£ v·ªÅ'
            },
            count: {
              type: 'number',
              description: 'S·ªë l∆∞·ª£ng items trong trang hi·ªán t·∫°i',
              example: 10
            },
            total: {
              type: 'number',
              description: 'T·ªïng s·ªë items',
              example: 100
            },
            pagination: {
              type: 'object',
              properties: {
                next: {
                  type: 'object',
                  properties: {
                    page: { type: 'number', example: 2 },
                    limit: { type: 'number', example: 10 }
                  }
                },
                prev: {
                  type: 'object',
                  properties: {
                    page: { type: 'number', example: 1 },
                    limit: { type: 'number', example: 10 }
                  }
                }
              }
            }
          }
        },
        LoginResponse: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: true
            },
            message: {
              type: 'string',
              example: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng'
            },
            token: {
              type: 'string',
              example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
            },
            data: {
              type: 'object',
              properties: {
                user: {
                  $ref: '#/components/schemas/User'
                }
              }
            }
          }
        },
        ValidationError: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: false
            },
            message: {
              type: 'string',
              example: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá'
            },
            errors: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  type: { type: 'string', example: 'field' },
                  value: { type: 'string', example: 'invalid_value' },
                  msg: { type: 'string', example: 'Email kh√¥ng h·ª£p l·ªá' },
                  path: { type: 'string', example: 'email' },
                  location: { type: 'string', example: 'body' }
                }
              }
            }
          }
        }
      }
    },
    security: [
      {
        bearerAuth: []
      }
    ]
  },
  apis: [
    './routes/*.js',
    './controllers/*.js',
    './models/*.js'
  ]
};

const specs = swaggerJsdoc(options);

module.exports = {
  swaggerUi,
  specs
};
